FILE fqName:<root> fileName:/scopes.kt
  FUN name:box visibility:public modality:FINAL <> () returnType:kotlin.String
    BLOCK_BODY
      VAR name:result type:kotlin.Int [val]
        CONST Int type=kotlin.Int value=91
      RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in <root>'
        WHEN type=kotlin.String origin=IF
          BRANCH
            if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: GET_VAR 'val result: kotlin.Int declared in <root>.box' type=kotlin.Int origin=null
              arg1: CALL 'public final fun times (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=MUL
                $this: CONST Int type=kotlin.Int value=7
                other: CONST Int type=kotlin.Int value=13
            then: CONST String type=kotlin.String value="OK"
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value="Fail: "
              GET_VAR 'val result: kotlin.Int declared in <root>.box' type=kotlin.Int origin=null
  FUN name:evalScopeTest visibility:public modality:FINAL <> (a:kotlin.Int, flag:kotlin.Boolean) returnType:kotlin.Int
    VALUE_PARAMETER name:a index:0 type:kotlin.Int
    VALUE_PARAMETER name:flag index:1 type:kotlin.Boolean
    BLOCK_BODY
      VAR name:result type:kotlin.Int [var]
        CONST Int type=kotlin.Int value=1
      WHEN type=kotlin.Unit origin=IF
        BRANCH
          if: GET_VAR 'flag: kotlin.Boolean declared in <root>.evalScopeTest' type=kotlin.Boolean origin=null
          then: BLOCK type=kotlin.Unit origin=null
            VAR name:a type:kotlin.Int [val]
              CONST Int type=kotlin.Int value=13
            SET_VAR 'var result: kotlin.Int declared in <root>.evalScopeTest' type=kotlin.Unit origin=MULTEQ
              CALL 'public final fun times (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=MULTEQ
                $this: GET_VAR 'var result: kotlin.Int declared in <root>.evalScopeTest' type=kotlin.Int origin=MULTEQ
                other: GET_VAR 'val a: kotlin.Int declared in <root>.evalScopeTest' type=kotlin.Int origin=null
        BRANCH
          if: CONST Boolean type=kotlin.Boolean value=true
          then: BLOCK type=kotlin.Unit origin=null
            VAR name:a type:kotlin.Int [val]
              CONST Int type=kotlin.Int value=5
            SET_VAR 'var result: kotlin.Int declared in <root>.evalScopeTest' type=kotlin.Unit origin=MULTEQ
              CALL 'public final fun times (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=MULTEQ
                $this: GET_VAR 'var result: kotlin.Int declared in <root>.evalScopeTest' type=kotlin.Int origin=MULTEQ
                other: GET_VAR 'val a: kotlin.Int declared in <root>.evalScopeTest' type=kotlin.Int origin=null
      RETURN type=kotlin.Nothing from='public final fun evalScopeTest (a: kotlin.Int, flag: kotlin.Boolean): kotlin.Int declared in <root>'
        CALL 'public final fun times (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=MUL
          $this: GET_VAR 'var result: kotlin.Int declared in <root>.evalScopeTest' type=kotlin.Int origin=null
          other: GET_VAR 'a: kotlin.Int declared in <root>.evalScopeTest' type=kotlin.Int origin=null
