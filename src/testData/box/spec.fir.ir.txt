FILE fqName:<root> fileName:/spec.kt
  FUN name:box visibility:public modality:FINAL <> () returnType:kotlin.String
    BLOCK_BODY
      VAR name:result type:kotlin.Int [val]
        CONST Int type=kotlin.Int value=3
      RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in <root>'
        WHEN type=kotlin.String origin=IF
          BRANCH
            if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: GET_VAR 'val result: kotlin.Int declared in <root>.box' type=kotlin.Int origin=null
              arg1: CONST Int type=kotlin.Int value=3
            then: CONST String type=kotlin.String value="OK"
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value="Fail: "
              GET_VAR 'val result: kotlin.Int declared in <root>.box' type=kotlin.Int origin=null
  FUN name:evalAdd visibility:public modality:FINAL <> (a:kotlin.Int, b:kotlin.Int) returnType:kotlin.Int
    VALUE_PARAMETER name:a index:0 type:kotlin.Int
    VALUE_PARAMETER name:b index:1 type:kotlin.Int
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun evalAdd (a: kotlin.Int, b: kotlin.Int): kotlin.Int declared in <root>'
        CALL 'public final fun plus (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=PLUS
          $this: GET_VAR 'a: kotlin.Int declared in <root>.evalAdd' type=kotlin.Int origin=null
          other: GET_VAR 'b: kotlin.Int declared in <root>.evalAdd' type=kotlin.Int origin=null
