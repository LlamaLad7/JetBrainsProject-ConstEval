FILE fqName:<root> fileName:/failsGracefully.kt
  FUN name:box visibility:public modality:FINAL <> () returnType:kotlin.String
    BLOCK_BODY
      VAR name:result type:kotlin.Int [val]
        CALL 'public final fun evalBad (): kotlin.Int declared in <root>' type=kotlin.Int origin=null
      RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in <root>'
        WHEN type=kotlin.String origin=IF
          BRANCH
            if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: GET_VAR 'val result: kotlin.Int declared in <root>.box' type=kotlin.Int origin=null
              arg1: CONST Int type=kotlin.Int value=-1
            then: CONST String type=kotlin.String value="OK"
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value="Fail: "
              GET_VAR 'val result: kotlin.Int declared in <root>.box' type=kotlin.Int origin=null
  FUN name:evalBad visibility:public modality:FINAL <> () returnType:kotlin.Int
    BLOCK_BODY
      CALL 'public final fun println (message: kotlin.Any?): kotlin.Unit declared in kotlin.io' type=kotlin.Unit origin=null
        message: CONST String type=kotlin.String value="Can't eval this!"
      RETURN type=kotlin.Nothing from='public final fun evalBad (): kotlin.Int declared in <root>'
        CONST Int type=kotlin.Int value=-1
